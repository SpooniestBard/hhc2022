"use strict";(self.webpackChunkhhc_2022=self.webpackChunkhhc_2022||[]).push([[319],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),h=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=h(r),u=a,f=p["".concat(l,".").concat(u)]||p[u]||d[u]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var h=2;h<o;h++)i[h]=r[h];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5146:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>h});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:3},i="Exploit a Smart Contract",s={unversionedId:"hhc2022/burning_ring_of_fire/exploit_a_smart_contract",id:"hhc2022/burning_ring_of_fire/exploit_a_smart_contract",title:"Exploit a Smart Contract",description:"Background",source:"@site/docs/hhc2022/burning_ring_of_fire/exploit_a_smart_contract.md",sourceDirName:"hhc2022/burning_ring_of_fire",slug:"/hhc2022/burning_ring_of_fire/exploit_a_smart_contract",permalink:"/hhc2022/docs/hhc2022/burning_ring_of_fire/exploit_a_smart_contract",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Blockchain Divination",permalink:"/hhc2022/docs/hhc2022/burning_ring_of_fire/blockchain_divination"},next:{title:"Secrets",permalink:"/hhc2022/docs/hhc2022/secrets"}},l={},h=[{value:"Background",id:"background",level:3},{value:"Challenge",id:"challenge",level:3},{value:"Answer",id:"answer",level:3}],c={toc:h};function p(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"exploit-a-smart-contract"},"Exploit a Smart Contract"),(0,a.kt)("h3",{id:"background"},"Background"),(0,a.kt)("p",null,"A Sporc named Luigi has used the blockchain that hosts KringleCoin to develop his own very above-board NFT collection called the ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Bored_Ape"},"Bored Ape Yacht"),"... I mean the Bored Sporc Rowboat Society (BSRS). We absolutely need to get in before the project gets rug pulled, but unfortunately our wallet isn't on the pre-sale list. Maybe we can find a way to trick the system."),(0,a.kt)("h3",{id:"challenge"},"Challenge"),(0,a.kt)("admonition",{title:"Challenge Text",type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"Difficulty:")," \u2605\u2605\u2605\u2605\u2605"),(0,a.kt)("p",{parentName:"admonition"},"Exploit flaws in a smart contract to buy yourself a Bored Sporc NFT. Find hints for this objective hidden throughout the tunnels.")),(0,a.kt)("h3",{id:"answer"},"Answer"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("a",{parentName:"p",href:"https://prod-blockbrowser.kringle.co.in/"},"KringleCoin block chain explorer"),", we can find the block that creates the BSRS smart contract: block 2. The function which performs the pre-sale mint seems interesting:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    function presale_mint(address to, bytes32 _root, bytes32[] memory _proof) public virtual {\n        bool _preSaleIsActive = preSaleIsActive;\n        require(_preSaleIsActive, "Presale is not currently active.");\n        bytes32 leaf = keccak256(abi.encodePacked(to));\n        require(verify(leaf, _root, _proof), "You are not on our pre-sale allow list!");\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();        \n    }\n')),(0,a.kt)("p",null,"This function calls a function named ",(0,a.kt)("inlineCode",{parentName:"p"},"verify()")," in order to determine if a recipient is allowed to mint the token. Let's take a look at that too."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    function verify(bytes32 leaf, bytes32 _root, bytes32[] memory proof) public view returns (bool) {\n        bytes32 computedHash = leaf;\n        for (uint i = 0; i < proof.length; i++) {\n          bytes32 proofElement = proof[i];\n          if (computedHash <= proofElement) {\n            computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n          } else {\n            computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n          }\n        }\n        return computedHash == _root;\n    }\n")),(0,a.kt)("p",null,"In order to really explain what is happening, it's important to understand a data structure called a ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Merkle_tree"},"Merkle tree"),". Expand the section below if you want a full primer on the subject."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Merkle Tree Primer"),(0,a.kt)("p",null,"A Merkle tree is a tree data structure where every leaf node contains a cryptographic hash (since we're using Ethereum here, a ",(0,a.kt)("a",{parentName:"p",href:"https://deeprnd.medium.com/keccak-hashing-algorithm-sha-3-827896e49913"},"Keccak hash")," in this case). Moving up the tree, every non-leaf node contains a cryptographic hash of the nodes below it. This process continues until we reach the very top (or bottom, for the Australians) of the tree. At this point, we will have one hash which is a combination of all of the other hashes in the tree. This is referred to as the ",(0,a.kt)("strong",{parentName:"p"},"root hash"),"."),(0,a.kt)("p",null,"Given some hashing function (",(0,a.kt)("inlineCode",{parentName:"p"},"hash()")," in this case), a simple Merkle tree consisting of four hashes would look like the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"0----------------------------------------------------0\n|                        Root                        |\n| hash(hash(hash_1 + hash_2) + hash(hash_3 + hash4)) |\n0----------------------------------------------------0\n            |                               |\n0-----------------------0       0-----------------------0\n| hash(hash_1 + hash_2) |       | hash(hash_3 + hash_4) |\n0-----------------------0       0-----------------------0\n     |           |                  |               |\n0--------0   0--------0         0--------0      0--------0\n| hash_1 |   | hash_2 |         | hash_3 |      | hash_4 |\n0--------0   0--------0         0--------0      0--------0\n")),(0,a.kt)("p",null,"The advantage of a Merkle tree becomes clear if I want to prove a given hash input was part of the original list of leaf nodes. Because of the way the tree is architected, I can do this with only a small handful of values and ",(0,a.kt)("em",{parentName:"p"},"not")," the entirety of the tree. For instance, if I want to prove that hash_3 was part of the original hashed set, then the only values I would need are ",(0,a.kt)("inlineCode",{parentName:"p"},"hash_4"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"hash(hash_1 + hash2)"),". These two values are then known as my ",(0,a.kt)("strong",{parentName:"p"},"proof values"),". If I were to hash my initial value of hash_3 together with them in proper order, I should be able to perfectly recreate the root hash of the tree."),(0,a.kt)("p",null,"This feature is very useful as the Merkle tree grows larger, since the amount of proof values I would require only increases logarithmically with the size of the tree: as Professor Query Petabyte mentions:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"A proof containing 32 integers would be sufficient for a Merkle Tree with 4,294,967,296 leaf nodes!")),(0,a.kt)("p",null,"Speaking of Professor Query Petabyte, he's provided us with an ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/QPetabyte/Merkle_Trees"},"extremely helpful repository")," that explains all of this in more detail and also has a Python script that lets us compute proof values and root of a Merkle tree out of the box. It can even give us the root and proof values of a Merkle tree with just one leaf hash! Although, we shouldn't something that basic... right?"),(0,a.kt)("p",null,"Another interesting quality of Merkle trees (which unfortunately makes our jobs harder here) is that the proof values provided to a user do not provide any other information about the data the tree was originally created from.")),(0,a.kt)("p",null,"To put it briefly, since blockchain storage is expensive, Luigi has elected to use a Merkle Tree and distribute proof values to his Sporc buddies in order to avoid storing every possible pre-sale eligible wallet."),(0,a.kt)("p",null,"However, in the Query Petabyte repo I linked earlier, we're given a somewhat incognito hint amongst the rest of the information:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Of course, the root mustn't be able to be altered, which is why keeping it IN the smart contract on the blockchain is what smart developers do.")),(0,a.kt)("p",null,"This is very true: if we were able to modify the root hash somehow, then the integrity of the entire Merkle tree would be null and void. Despite this, searching through the rest of the Solidity source code that establishes the BSRS smart contract reveals no hard coded root hash, nor any references to one somewhere else on the blockchain, even though the ",(0,a.kt)("inlineCode",{parentName:"p"},"verify()")," function accepts it as an argument. If we attempt to buy a BSRS NFT from the terminal and analyze the web traffic, it becomes clear what's happening: the root hash is stored and handled by the BSRS website."),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(1037).Z,width:"2480",height:"1376"})),(0,a.kt)("p",null,"Sticking in ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," for both the proof and wallet address on the purchase page makes us send the following request:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(4617).Z,width:"2330",height:"1584"})),(0,a.kt)("p",null,"We can pretty confidently say that this ",(0,a.kt)("inlineCode",{parentName:"p"},"Root")," argument here is the root hash of the Merkle tree, and since we're in control of this request, we're in control of the validity of the entire tree! Using the Professor's Python script, we can substitute our wallet address ",(0,a.kt)("inlineCode",{parentName:"p"},"0x9855d7CeaE9C6169e00F3CfeF9f1797269434813")," (along with the null address so we get at least one proof value) into the program's allow list and run it to get our root hash and proof value:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"allowlist = ['0x9855d7CeaE9C6169e00F3CfeF9f1797269434813','0x0000000000000000000000000000000000000000']\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"devan@daedalus (/Users/devan/Merkle_Trees) $ ./merkle_tree.py \nRoot: 0xdf5d48b2c2658bc30434b0027c71f692f9f10a1b0517cabc8e551fd0212679c5\nProof: ['0x5380c7b7ae81a58eb98d9c78de4a1fd7fd9535fc953ed2be602daaa41767312a']\n")),(0,a.kt)("p",null,"Now, we can intercept the traffic, edit in our values (making sure to overwrite the original root value) and send it through to be told what we already know \ud83d\ude0e"),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(9288).Z,width:"1286",height:"252"})),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(1836).Z,width:"2458",height:"690"})),(0,a.kt)("p",null,"Finally, we can authorize a transaction of 100 KC to the BSRS wallet address of ",(0,a.kt)("inlineCode",{parentName:"p"},"0xe8fC6f6a76BE243122E3d01A1c544F87f1264d3a"),". Once we send the transaction through again with the ",(0,a.kt)("inlineCode",{parentName:"p"},"Validate")," argument set to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),", we're now the proud owner of a BSRS NFT!"),(0,a.kt)("p",null,(0,a.kt)("img",{src:r(1995).Z,width:"2442",height:"444"})),(0,a.kt)("p",null,"Isn't it lovely? (pls do not screenshot I will sue)"),(0,a.kt)("img",{src:r(6731).Z,style:{height:"500px"}}))}p.isMDXComponent=!0},6731:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/BSRS696-4eda253cff8d559cd7b33cd1c0724a2a.png"},1037:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/brof3-1-3b90f940bef33ece2da665e952e65d26.png"},4617:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/brof3-2-3d10afb647939b7a3ff39d50894c839d.png"},9288:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/brof3-3-e6aa211495b98c1bee6f762ad0013d30.png"},1836:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/brof3-4-666752ad02b30362ecd09b357667dd48.png"},1995:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/brof3-5-5584d8b59dc4f9c4672cada5ebd5fa3e.png"}}]);